IRkernel::installspec(user = FALSE)
IRkernel::installspec(user = lg)
IRkernel::installspec(user = "lg")
IRkernel::installspec(user = T)
print (sequences)
secuencias = c (
"GAGGTAAAC",
"TCCGTAAGT",
"CAGGTTGGA",
"ACAGTCAGT",
"TAGGTCATT",
"TAGGTACTG",
"ATGGTAACT",
"CAGGTATAC",
"TGTGTGAGT",
"AAGGTAAGT")
N = length (secuencias)    # Numero de secuencias
M = nchar (secuencias [1]) # Tamaño de cada secuencia
print (paste ("NxM: ", N, M))
print (secuencias)
seqMatrix = matrix (unlist (strsplit (secuencias, split="")),nrow=N,byrow = T)
print (seqMatrix)
freqMatrix = NULL
bases = c("A","C","G","T")
for (j in 1:M) {
conteos = c()
for (B in aminos) {
nB = length(which (seqMatrix[,j]==B)) # Conteo de la base B en la posicion j
conteos = c(conteos, nB)
}
freqMatrix = cbind (freqMatrix, conteos) # Adicionamos los conteos de la posicion j
}
freqMatrix = NULL
bases = c("A","C","G","T")
for (j in 1:M) {
conteos = c()
for (B in bases) {
nB = length(which (seqMatrix[,j]==B)) # Conteo de la base B en la posicion j
conteos = c(conteos, nB)
}
freqMatrix = cbind (freqMatrix, conteos) # Adicionamos los conteos de la posicion j
}
# Asignamos nombres a las filas y columnas
rownames (freqMatrix) = bases
colnames (freqMatrix) = paste0 ("p", 1:M)
freqMatrix = freqMatrix + 1 # Pseudoconteo: adicionamos 1 para evitar ceros en la matriz
#freqMatrix = freqMatrix
freqMatrix
freqMatrix = NULL
bases = c("A","C","G","T")
for (j in 1:M) {
conteos = c()
for (B in bases) {
nB = length(which (seqMatrix[,j]==B)) # Conteo de la base B en la posicion j
conteos = c(conteos, nB)
}
freqMatrix = cbind (freqMatrix, conteos) # Adicionamos los conteos de la posicion j
}
# Asignamos nombres a las filas y columnas
rownames (freqMatrix) = bases
colnames (freqMatrix) = paste0 ("p", 1:M)
freqMatrix = freqMatrix + 1 # Pseudoconteo: adicionamos 1 para evitar ceros en la matriz
print ("Matrix de frecuencias:")
print (freqMatrix)
freqMatrix = NULL
bases = c("A","C","G","T")
for (j in 1:M) {
conteos = c()
for (B in bases) {
nB = length(which (seqMatrix[,j]==B)) # Conteo de la base B en la posicion j
conteos = c(conteos, nB)
}
freqMatrix = cbind (freqMatrix, conteos) # Adicionamos los conteos de la posicion j
}
# Asignamos nombres a las filas y columnas
rownames (freqMatrix) = bases
colnames (freqMatrix) = paste0 ("p", 1:M)
freqMatrix = freqMatrix + 1 # Pseudoconteo: adicionamos 1 para evitar ceros en la matriz
message ("Matrix de frecuencias:")
print (freqMatrix)
seqMatrix = matrix (unlist (strsplit (secuencias, split="")),nrow=N,byrow = T)
message ("Secuencias como Matrix de caracteres: ")
print (seqMatrix)
secuencias = c (
"GAGGTAAAC",
"TCCGTAAGT",
"CAGGTTGGA",
"ACAGTCAGT",
"TAGGTCATT",
"TAGGTACTG",
"ATGGTAACT",
"CAGGTATAC",
"TGTGTGAGT",
"AAGGTAAGT")
N = length (secuencias)    # Numero de secuencias
M = nchar (secuencias [1]) # Tamaño de cada secuencia
message ("Vector de cadenas de secuencias:")
message (paste ("Dimension NxM: ", N, M))
print (secuencias)
secuencias = c (
"GAGGTAAAC",
"TCCGTAAGT",
"CAGGTTGGA",
"ACAGTCAGT",
"TAGGTCATT",
"TAGGTACTG",
"ATGGTAACT",
"CAGGTATAC",
"TGTGTGAGT",
"AAGGTAAGT")
N = length (secuencias)    # Numero de secuencias (Filas)
M = nchar (secuencias [1]) # Tamaño de cada secuencia (Columnas)
message ("Vector de cadenas de secuencias:")
message (paste ("Dimension NxM: ", N, M))
print (secuencias)
freqMatrix = NULL
bases = c("A","C","G","T")
for (j in 1:M) {
conteos = c()
for (B in bases) {
nB = length(which (seqMatrix[,j]==B)) # Conteo de la base B en la posicion j
conteos = c(conteos, nB)
}
freqMatrix = cbind (freqMatrix, conteos) # Adicionamos los conteos de la posicion j
}
# Asignamos nombres a las filas y columnas
rownames (freqMatrix) = bases
colnames (freqMatrix) = paste0 ("p", 1:M)
freqMatrix = freqMatrix + 1 # Pseudoconteo: adicionamos 1 para evitar ceros en la matriz
message ("Matrix de frecuencias:")
print (freqMatrix)
probMatrix = freqMatrix/(N)
print (round (probMatrix, 2))
PWM = probMatrix
probMatrix = freqMatrix/(N+4)
print (round (probMatrix, 2))
PWM = probMatrix
probMatrix = freqMatrix/(N+4) # Dividimos entre N+4 porque el pseudoconteo adiciona 1 por cada base
PWM = probMatrix
message ("Matrix de probabilidades (PWM): ")
print (round (probMatrix, 2))
i=12
sumIi=0
for (b in bases) {
sumIi = (sumIi + PWM [b,i]*log2(PWM[b,i]))
}
i=7
sumIi=0
for (b in bases) {
sumIi = (sumIi + PWM [b,i]*log2(PWM[b,i]))
}
print (2+sumIi)
i=5   # Posicion 5 conservada: maximo contenido de informacion
sumIi=0
for (b in bases) {
sumIi = (sumIi + PWM [b,i]*log2(PWM[b,i]))
}
print (2+sumIi)
i=5   # Posicion 5 conservada: maximo contenido de informacion
sumIi=0
for (b in bases) {
sumIi = (sumIi + PWM [b,i]*log2(PWM[b,i]))
}
message ("Contenido información posicion conservada: ")
print (2+sumIi)
i=5   # Posicion 5 conservada: maximo contenido de informacion
sumIi=0
for (b in bases) {
sumIi = (sumIi + PWM [b,i]*log2(PWM[b,i]))
}
message ("Contenido información posicion conservada (pi=5): ")
print (2+sumIi)
print (round (PWM,2))
print ("")
ggseqlogo (PWM)
require(ggplot2)
require(ggseqlogo)
print (round (PWM,2))
print ("")
ggseqlogo (PWM)
ggseqlogo (PWM)
S = "CAGGTTGGA"
seqS = unlist (strsplit (S,"",))
message ("Seq S = ", seqS)
print (round (PWM, 2))
probabilidad = 1
multiplicaciones = NULL
for (j in 1:M) {
jBase = seqS[j]
probBase = PWM [jBase,j]
probabilidad = probabilidad * probBase
multiplicaciones = c (multiplicaciones, probBase)
}
message (paste0 (round (multiplicaciones, 2),sep=" x "))
message("\nProbabilidad = ", probabilidad)
S = "CAGGTTGGA"
seqS = unlist (strsplit (S,"",)) # Convertimos la cadena a un vector de caracteres
message ("Seq S = ", seqS)
nS = length( (seqS))  # Numero de bases de la secuencia S
probTotal = 1   # Probabilidad total inicial
for (j in 1:nS) { # Iteramos sobre todas las posiciones de la secuencia S
base_j = seqS [j]
probBase = PWM [base_j, j]
probabilidad = probabilidad * probBase
}
message("\nProbabilidad = ", probabilidad)
freqMatrix = freqMatrix  # Pseudoconteo: adicionamos 1 para evitar ceros en la matriz
freqMatrix = NULL
bases = c("A","C","G","T")
# aminos = ....
for (j in 1:M) {
conteos = c()
for (B in bases) {
nB = length(which (seqMatrix[,j]==B)) # Conteo de la base B en la posicion j
conteos = c(conteos, nB)
}
freqMatrix = cbind (freqMatrix, conteos) # Adicionamos los conteos de la posicion j
}
# Asignamos nombres a las filas y columnas
rownames (freqMatrix) = bases     # Para nucleotidos
#rownames (freqMatrix) = aminos   # Para aminoacidos
colnames (freqMatrix) = paste0 ("p", 1:M)
freqMatrix = freqMatrix  # Pseudoconteo: adicionamos 1 para evitar ceros en la matriz
message ("Matrix de frecuencias:")
print (freqMatrix)
probMatrix = freqMatrix/(N) # Dividimos entre N+4 porque el pseudoconteo adiciona 1 por cada base
PWM = probMatrix
message ("Matrix de probabilidades (PWM): ")
print (round (probMatrix, 2))
ggseqlogo (PWM)
ggseqlogo (PWM)
secuencias = c (
"GAGGTAAAT",
"GCCGTAAGT",
"GAGGTTGGT",
"GCCGTCAGT",
"GAGGTCATT",
"GACGTACTT",
"GTGGTAACT",
"GACGTATAT",
"GGCGTGAGT",
"GAGGTAAGT")
secuencias = c (
"GAGGTAAAT",
"GCCGTAAGT",
"GAGGTTGGT",
"GCCGTCAGT",
"GAGGTCATT",
"GACGTACTT",
"GTGGTAACT",
"GACGTATAT",
"GGCGTGAGT",
"GAGGTAAGT")
N = length (secuencias)    # Numero de secuencias (Filas)
M = nchar (secuencias [1]) # Tamaño de cada secuencia (Columnas)
message ("Vector de cadenas de secuencias:")
message (paste ("Dimension NxM: ", N, M))
print (secuencias)
seqMatrix = matrix (unlist (strsplit (secuencias, split="")),nrow=N,byrow = T)
message ("Secuencias como Matrix de caracteres: ")
print (seqMatrix)
freqMatrix = NULL
bases = c("A","C","G","T")
# aminos = ....
for (j in 1:M) {
conteos = c()
for (B in bases) {
nB = length(which (seqMatrix[,j]==B)) # Conteo de la base B en la posicion j
conteos = c(conteos, nB)
}
freqMatrix = cbind (freqMatrix, conteos) # Adicionamos los conteos de la posicion j
}
# Asignamos nombres a las filas y columnas
rownames (freqMatrix) = bases     # Para nucleotidos
#rownames (freqMatrix) = aminos   # Para aminoacidos
colnames (freqMatrix) = paste0 ("p", 1:M)
freqMatrix = freqMatrix  # Pseudoconteo: adicionamos 1 para evitar ceros en la matriz
message ("Matrix de frecuencias:")
print (freqMatrix)
probMatrix = freqMatrix/(N) # Dividimos entre N+4 porque el pseudoconteo adiciona 1 por cada base
PWM = probMatrix
message ("Matrix de probabilidades (PWM): ")
print (round (probMatrix, 2))
ggseqlogo (PWM)
print ("G-x-[CG]-G-T-x-x-x-T")
print ("G-x-[CG]-G-T-x-x-x-T")
freqMatrix = NULL
bases = c("A","C","G","T")
# aminos = ....
for (j in 1:M) {
conteos = c()
for (B in bases) {
nB = length(which (seqMatrix[,j]==B)) # Conteo de la base B en la posicion j
conteos = c(conteos, nB)
}
freqMatrix = cbind (freqMatrix, conteos) # Adicionamos los conteos de la posicion j
}
# Asignamos nombres a las filas y columnas
rownames (freqMatrix) = bases     # Para nucleotidos
#rownames (freqMatrix) = aminos   # Para aminoacidos
colnames (freqMatrix) = paste0 ("p", 1:M)
freqMatrix = freqMatrix  # TRABAJAR SIN PSEUDOCONTEOS, ya que vamos solo a obtener el motivo
message ("Matrix de frecuencias:")
print (freqMatrix)
